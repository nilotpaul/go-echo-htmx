#!/usr/bin/env node
var c=(e,i)=>()=>(i||e((i={exports:{}}).exports,i),i.exports);var a=c((f,o)=>{function p(e){return e}o.exports=p});var l=c((exports,module)=>{var fs=require("fs"),readFile=fs.readFileSync,writeFile=fs.writeFileSync,statPath=fs.statSync,JSON=/^\s*\{[^]*\}\s*$/gi;module.exports=function(HTMX){function unpickle(__json){return eval("["+__json+"]")[0]}var test=process.argv.slice(2).join(" "),getParam=function(e){return new RegExp(e+"\\s+([^]*?)\\s*(-|$)","gi")},dir=getParam("[-]?-b\\w*").exec(test),ctx=getParam("[-]?-c\\w*").exec(test),tpl=getParam("[-]?-t\\w*").exec(test),dat=getParam("[-]?-r\\w*").exec(test),delim=/[-]?-d\w*\s+([^]*?)\s([^]*?)\s*(-|$)/gi.exec(test);delim&&(delim=[delim[1],delim[2]]);var render=HTMX(delim);if(dir){dir=dir[1];var isdir;try{isdir=statPath(dir).isDirectory}catch{}if(!isdir)throw new Error("--build isn't a directory, can't read")}if(dat){if(dat=dat[1],!dir)throw new Error("--build directory required");process.stderr.write("TODO: not implemented, PRs welcome")}else{if(tpl&&(tpl=tpl[1]),ctx)if(ctx=ctx[1],process.stderr.write("Running "+(tpl||"STDIN")+" with "+ctx+`
`),ctx&&ctx.match(JSON))ctx=unpickle(ctx);else try{ctx=unpickle(readFile(ctx).toString())}catch{throw new Error("--context not a Javascript object, can't read as filename")}if(tpl){try{var out=render(readFile(tpl).toString(),ctx)}catch(e){throw e.code=="ENOENT"?new Error("--template can't be read as filename"):(process.stderr.write("Can't render template"),e)}dir?writeFile(dir+"/"+tpl.split("/").pop(),out):process.stdout.write(out)}else tpl=[],process.stdin.on("readable",function(){tpl.push(process.stdin.read())}),process.stdin.on("end",function(){tpl&&process.stdout.write(render(tpl.join(""),ctx))})}}});var preprocess=a(),DELIM=["::","::"],JSON=/^\s*\{[^]*\}\s*$/gi;function HTMX(delim){function unpickle(__ctx,__js){with(__ctx)return eval(__js)}var EMPTY_STR="",NOT_DELIM=ANY="([^]*?)";return function(e,i){return function(d,n){var t=d.split(new RegExp(e.join(NOT_DELIM),"ig")),s=0,r,n=n||{};do r=3*s+1,t[r]&&t[r].match(JSON)?(t[r]=unpickle(n,"["+t[r]+"]")[0],t[r]=i.call(n,t[r]),t[r]=t[r].return):t[r]=unpickle(n,t[r]),s+=1;while(t[3*s]!==void 0);return t.join(EMPTY_STR)}}(delim||DELIM,preprocess)}if(require.main===module){if(2>=process.argv.length)throw new Error("use --root with --build, or --template with --context");l()(HTMX)}else module.exports=HTMX;
